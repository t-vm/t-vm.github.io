<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Python3 File Handling</title>
    <link href="/2024/03/08/Python3-File-Handling/"/>
    <url>/2024/03/08/Python3-File-Handling/</url>
    
    <content type="html"><![CDATA[<h1 id="写在开头"><a href="#写在开头" class="headerlink" title="写在开头"></a>写在开头</h1><p>这部分内容有时挺易混的, 故整理出本文作备忘录使用<br>本文缝了一大堆东西, 它们来自官方文档、网络和自己大一大二时零零散散的笔记.<br>以下内容基于: Python3.11</p><h1 id="读写文本文件"><a href="#读写文本文件" class="headerlink" title="读写文本文件"></a>读写文本文件</h1><p>我觉得<a href="https://www.freecodecamp.org/chinese/news/file-handling-in-python/">这里</a>总结得比我好, 而且这块内容实际应用的时候基本不会出什么大问题, 绝无可能是我懒得写.</p><p>tips: read开头的三个方法的区别:<br><code>read()</code>如果没有指定字节数, 就读取全部<br><code>readline()</code>返回一行<br><code>readlines()</code>返回所有行构成的的<strong>列表</strong></p><h1 id="序列化与反序列化-使用pickle"><a href="#序列化与反序列化-使用pickle" class="headerlink" title="序列化与反序列化(使用pickle)"></a>序列化与反序列化(使用pickle)</h1><h2 id="pickle特性"><a href="#pickle特性" class="headerlink" title="pickle特性"></a>pickle特性</h2><ul><li>快, 但不安全(无加密, 无数字签名)</li><li>简单好使</li></ul><h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><h3 id="使用pickle-dump-和pickle-load"><a href="#使用pickle-dump-和pickle-load" class="headerlink" title="使用pickle.dump()和pickle.load()"></a>使用<code>pickle.dump()</code>和<code>pickle.load()</code></h3><h4 id="写二进制文件-pickle-dump-obj-file"><a href="#写二进制文件-pickle-dump-obj-file" class="headerlink" title="写二进制文件: pickle.dump(obj, file)"></a>写二进制文件: pickle.dump(obj, file)</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">pickle.dump(_obj_, _file_, _protocol=None_, _*_, _fix_imports=True_, _buffer_callback=None_)<br></code></pre></td></tr></table></figure><blockquote><p>它等同于 <code>Pickler(file,protocol).dump(obj)</code>。</p></blockquote><p>将对象 <code>obj </code>封存以后写入已打开的file object <code>file</code>.<br><strong>我就经常干蠢事: 忘记要先使用<code>open()</code>等方法打开文件再进行序列化</strong></p><h4 id="读二进制文件-pickle-load-file"><a href="#读二进制文件-pickle-load-file" class="headerlink" title="读二进制文件: pickle.load(file)"></a>读二进制文件: pickle.load(file)</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">pickle.load(_file_, _*_, _fix_imports=True_, _encoding=<span class="hljs-string">&#x27;ASCII&#x27;</span>_, _errors=<span class="hljs-string">&#x27;strict&#x27;</span>_, _buffers=None_)<br></code></pre></td></tr></table></figure><blockquote><p>它相当于 <code>Unpickler(file).load()</code>。</p></blockquote><p>从已打开的 file object 中读取封存后的对象，<em>重建</em>其中特定对象的层次结构并返回.</p><p>Pickle 协议版本是自动检测出来的，所以一般<strong>不需要</strong>参数来指定协议。封存对象以外的其他字节将被忽略。</p><h3 id="使用例"><a href="#使用例" class="headerlink" title="使用例"></a>使用例</h3><p>这两个函数用于将对象序列化<strong>到文件</strong>或<strong>从文件</strong>中反序列化对象。<br>原始数据: </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">data = &#123;<span class="hljs-string">&#x27;a&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;b&#x27;</span>: <span class="hljs-number">2</span>, <span class="hljs-string">&#x27;c&#x27;</span>: <span class="hljs-number">3</span>&#125;<br></code></pre></td></tr></table></figure><p><strong>序列化到文件</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;serialized_data.pkl&#x27;</span>, <span class="hljs-string">&#x27;wb&#x27;</span>) <span class="hljs-keyword">as</span> f:         <br>pickle.dump(data, f)<br></code></pre></td></tr></table></figure><p>将<code>data</code>对象序列化到名为<code>serialized_data.pkl</code>的文件中。</p><p><strong>从文件中反序列化</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;serialized_data.pkl&#x27;</span>, <span class="hljs-string">&#x27;rb&#x27;</span>) <span class="hljs-keyword">as</span> f:    <br>data_from_file = pickle.load(f)<br></code></pre></td></tr></table></figure><p>从文件<code>serialized_data.pkl</code>中读取并反序列化对象。</p><p>本例中，从文件中加载的数据输出如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">&#123;<span class="hljs-string">&#x27;a&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;b&#x27;</span>: <span class="hljs-number">2</span>, <span class="hljs-string">&#x27;c&#x27;</span>: <span class="hljs-number">3</span>&#125;<br></code></pre></td></tr></table></figure><h2 id="补充-直接操作-不涉及文件"><a href="#补充-直接操作-不涉及文件" class="headerlink" title="补充: 直接操作(不涉及文件)"></a>补充: 直接操作(不涉及文件)</h2><p>使用<code>pickle.dumps()</code>和<code>pickle.loads()</code><br>这两个函数直接在内存中操作，<strong>不涉及文件系统</strong>. 也算是比较常用.<br>直接用例子:</p><p><strong>原始数据</strong>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">data = &#123;<span class="hljs-string">&#x27;a&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;b&#x27;</span>: <span class="hljs-number">2</span>, <span class="hljs-string">&#x27;c&#x27;</span>: <span class="hljs-number">3</span>&#125;<br></code></pre></td></tr></table></figure><p><strong>序列化</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">serialized_data = pickle.dumps(data)<br></code></pre></td></tr></table></figure><p>python对象<code>data</code>被序列化为<em><strong>字节对象</strong></em><code>serialized_data</code>。</p><p> <strong>反序列化</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">deserialized_data = pickle.loads(serialized_data)<br></code></pre></td></tr></table></figure><p><em><strong>字节对象</strong></em><code>serialized_data</code>被反序列化为<strong>原始的Python对象</strong><code>deserialized_data</code>。</p><p>本例中，输出如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Serialized with dumps(): </span><br><span class="hljs-string">b&#x27;\x80\x04\x95\x17\x00\x00\x00\x00\x00\x00\x00&#125;\x94(\x8c\x01a\x94K\x01\x8c\x01b\x94K\x02\x8c\x01c\x94K\x03u.</span><br><span class="hljs-string"># Deserialized with loads(): </span><br><span class="hljs-string">&#123;&#x27;</span>a<span class="hljs-string">&#x27;: 1, &#x27;</span><span class="hljs-string">b&#x27;: 2, &#x27;</span>c<span class="hljs-string">&#x27;: 3&#125;</span><br></code></pre></td></tr></table></figure><p>可以看到<code>dumps()</code>之后直接就是bytes类型, 存储在变量<code>serialized_data</code>中.</p><h1 id="压缩与解压缩-使用gzip"><a href="#压缩与解压缩-使用gzip" class="headerlink" title="压缩与解压缩(使用gzip)"></a>压缩与解压缩(使用gzip)</h1><h2 id="基本用法-1"><a href="#基本用法-1" class="headerlink" title="基本用法"></a>基本用法</h2><h4 id="读压缩文件-gzip-open-filename-str-mode-str"><a href="#读压缩文件-gzip-open-filename-str-mode-str" class="headerlink" title="读压缩文件: gzip.open(filename:str, mode: str)"></a>读压缩文件: gzip.open(filename:str, mode: str)</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">gzip.<span class="hljs-built_in">open</span>(_filename_, _mode=<span class="hljs-string">&#x27;rb&#x27;</span>_, _compresslevel=9_, _encoding=None_, _errors=None_, _newline=None_)<br></code></pre></td></tr></table></figure><p>以二进制方式或者文本方式打开一个 gzip 格式的压缩文件，返回一个file object.</p><p><code>filename</code> 参数可以是一个实际的文件名，或者是一个<em><strong>用来读写的已存在的文件对象。</strong></em></p><p><code>mode</code> 参数可以是二进制模式： <code>&#39;r&#39;</code>, <code>&#39;rb&#39;</code>, <code>&#39;a&#39;</code>, <code>&#39;ab&#39;</code>, <code>&#39;w&#39;</code>, <code>&#39;wb&#39;</code>, <code>&#39;x&#39;</code> or <code>&#39;xb&#39;</code> <br>也可以是文本模式 <code>&#39;rt&#39;</code>, <code>&#39;at&#39;</code>, <code>&#39;wt&#39;</code>, or <code>&#39;xt&#39;</code>。默认值是 <code>&#39;rb&#39;</code>。</p><h4 id="写压缩文件"><a href="#写压缩文件" class="headerlink" title="写压缩文件"></a>写压缩文件</h4><p>使用<code>gzip.open()</code>打开压缩文件后得到文件对象, 使用诸如<code>write()</code>等方法正常写入即可.</p><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 读取压缩文件：</span><br><span class="hljs-keyword">with</span> gzip.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;/path/to/file/file.txt.gz&#x27;</span>, <span class="hljs-string">&#x27;rb&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>    file_content = f.read()<br><br><span class="hljs-comment"># 创建GZIP文件</span><br>content = <span class="hljs-string">b&quot;contents&quot;</span><br><span class="hljs-keyword">with</span> gzip.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;/path/to/file/file.txt.gz&#x27;</span>, <span class="hljs-string">&#x27;wb&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>    f.write(content)<br><br><span class="hljs-comment"># 使用GZIP压缩已打开的文件对象</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;/path/to/file/file.txt&#x27;</span>, <span class="hljs-string">&#x27;rb&#x27;</span>) <span class="hljs-keyword">as</span> f_in:<br>    <span class="hljs-keyword">with</span> gzip.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;/path/to/file/file.txt.gz&#x27;</span>, <span class="hljs-string">&#x27;wb&#x27;</span>) <span class="hljs-keyword">as</span> f_out:<br>    cont = f_in.read()<br>f_out.write(cont)<br></code></pre></td></tr></table></figure><h1 id="文件指针操作-seek-offset"><a href="#文件指针操作-seek-offset" class="headerlink" title="文件指针操作: seek(offset)"></a>文件指针操作: seek(offset)</h1><p><strong>seek()</strong> 方法用于移动文件读取指针到指定位置。</p><h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">fileObject.seek(offset[, whence])<br></code></pre></td></tr></table></figure><p>fileObject可以是任何已经存在的用来读写的文件对象</p><h4 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h4><ul><li><strong>offset</strong> – 开始的<em><strong>偏移量</strong></em>，也就是代表需要移动偏移的字节数</li><li><strong>whence：</strong>  <em><strong>可选</strong></em>，默认值为 0。给offset参数一个定义，表示要从哪个位置开始偏移:<ul><li>0代表从文件开头开始算起，</li><li>1代表从当前位置开始算起</li><li>2代表从文件末尾算起。</li></ul></li></ul><h4 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h4><p>如果操作成功，则返回新的文件位置，如果操作失败，则函数返回 -1。</p><h1 id="shelve-模块"><a href="#shelve-模块" class="headerlink" title="shelve 模块"></a>shelve 模块</h1><p>(这部分用的比较少, 原始笔记里有, 我删了)<br>通过<code>shelve.open()</code>方法打开一个shelve对象后，就可以使用<strong>类似字典</strong>的方式操作这个对象中的键值对.<br>具体用法省略</p><h1 id="请注意…"><a href="#请注意…" class="headerlink" title="请注意…"></a>请注意…</h1><p><strong>本blog中的所有内容均不会用于商业用途.</strong> </p><p>本文所用资料是我从网上搜寻和积累的. 本文的某些部分是拿资料直接cv之后改了两下扔进去的<br>我在网上冲浪的时候遇到自己感觉不错的文章和资料有时会把它们节选后存下来. 时间一长, 它们干脆就成了我pc硬盘中某些阴暗角落里的住民, 常年不见天日.<br>这时候麻烦又来了: 我经常忘记加作者和链接tag,  所以时间一长, 部分信息来源已不可考, 连我自己都忘了.<br><strong>所以如果您发现这篇文章中的某一部分很眼熟, 那大概率就是缝的您的.请联系我注明出处!(当然让我删了也行)</strong></p>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>coding</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>图片来源</title>
    <link href="/2024/03/07/%E5%9B%BE%E7%89%87%E6%9D%A5%E6%BA%90/"/>
    <url>/2024/03/07/%E5%9B%BE%E7%89%87%E6%9D%A5%E6%BA%90/</url>
    
    <content type="html"><![CDATA[<h2 id="写在开头"><a href="#写在开头" class="headerlink" title="写在开头"></a>写在开头</h2><p>本blog中的部分图片来自本人喜爱的几位插画师&#x2F;漫画家<br>在这里给感兴趣的朋友指一下路.<br>随着blog的更新所用图片可能会有变化, 但本文会进行留档. </p><h2 id="场景类"><a href="#场景类" class="headerlink" title="场景类"></a>场景类</h2><img src="/2024/03/07/%E5%9B%BE%E7%89%87%E6%9D%A5%E6%BA%90/t01.png" class="" title="t01"><p>pixiv ID: 74125530</p><ul><li>illustrator: あきま</li><li><a href="https://www.pixiv.net/users/19301797/artworks">pixiv</a><br>あきま老师有时喜欢在画作里插入一些很有趣的原创机体, 比如本作中的mig-21(可能更像su-17&#x2F;22一点?)类似物.<br>这位画师在b站也有账号. 可以搜索: 明正AkimatutiX</li></ul><img src="/2024/03/07/%E5%9B%BE%E7%89%87%E6%9D%A5%E6%BA%90/t02.png" class="" title="t02"><p>pixiv ID: 59198089</p><ul><li>illustrator: あきま</li><li><a href="https://www.pixiv.net/users/19301797/artworks">pixiv</a><br>(私货)同样是あきま老师的作品. 曾经被我拿来做了两年的头像.</li></ul><h2 id="人物类"><a href="#人物类" class="headerlink" title="人物类"></a>人物类</h2><img src="/2024/03/07/%E5%9B%BE%E7%89%87%E6%9D%A5%E6%BA%90/t04.png" class="" title="t04"><ul><li>illustrator: 村田蓮爾</li><li><a href="https://twitter.com/Murata_Range">Twitter</a><br>本人最喜欢的一位插画家, 业界老资历.<br>这张是《最终流放:银翼的法姆》的官绘.<br><del>高三填报志愿差点追随村田蓮爾老师的轨迹学了id</del></li></ul><img src="/2024/03/07/%E5%9B%BE%E7%89%87%E6%9D%A5%E6%BA%90/t05.png" class="" title="t05"><p>pixiv ID: 83246376</p><ul><li>illustrator:  冬野カモメ</li><li><a href="https://www.pixiv.net/users/42910565">pixiv</a><br>很喜欢冬野カモメ老师的色铅笔画</li></ul><h2 id="其它类"><a href="#其它类" class="headerlink" title="其它类"></a>其它类</h2><img src="/2024/03/07/%E5%9B%BE%E7%89%87%E6%9D%A5%E6%BA%90/t03.png" class="" title="t03"><p>pixiv ID: 114189893</p><ul><li>illustrator: Zimri . Ezekie</li><li><a href="https://www.pixiv.net/users/22531933">pixiv</a><br>作为文章的默认头图使用.<br>我最喜欢的抽象艺术流派是活跃于上世纪初的构成主义&#x2F;至上主义. 这位画师的作品很有这种风格.<br>不过需要注意的是, 这位老师的ID经常改动, 本文中的信息时效性会有不足.</li></ul><h2 id="请注意…"><a href="#请注意…" class="headerlink" title="请注意…"></a>请注意…</h2><p>本blog中的所有图片均不会用于商业用途. 但如果您不认为自己的作品应该出现在这里, 请联系我删除.</p>]]></content>
    
    
    <categories>
      
      <category>art</category>
      
    </categories>
    
    
    <tags>
      
      <tag>art</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>测试文章</title>
    <link href="/2024/03/06/0306/"/>
    <url>/2024/03/06/0306/</url>
    
    <content type="html"><![CDATA[<p>这是测试文章!<br>test</p><img src="/2024/03/06/0306/test.png" class="" title="图片引用方法一">]]></content>
    
    
    <categories>
      
      <category>test</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
